'use strict'

import {route} from '@dadi/preact-router'
import {URLParams} from 'lib/util/urlParams'

/**
 * @constructor Router
 * @param  {String} options.path Base path.
 * @param  {Object} options.params URL parameters.
 * @param  {Boolean} options.update Whether to update existing URL parameters.
 * @return {Function} Method call with URL generated by `createRouter`.
 */
export function router ({
  path,
  params,
  update
}) {
  let newRoute = createRoute(...arguments)

  route(newRoute)
}

/**
 * Create Routes
 * @param  {String} options.path Base path.
 * @param  {Object} options.params URL parameters.
 * @param  {Boolean} options.update Whether to update existing URL parameters.
 * @return {String} New Route, including parameters.
 */
export function createRoute ({
  path = window.location.pathname,
  params = null,
  update = false
}) {
  let newParams
  let fullPath = typeof path === 'object' ? buildUrl(...path) : path

  if (update && window.location.search) {
    // Retain existing params
    newParams = new URLParams(window.location.search).toObject()
  }

  if (params) {
    // Append new params to newParams object
    newParams = Object.assign({}, newParams, params)
  }

  if (fullPath.indexOf('?') > 0) {
    fullPath = fullPath.substring(0, fullPath.indexOf('?'))
  }

  if (newParams && Object.keys(newParams).length > 0) {
    fullPath += `?${new URLParams(newParams).toString()}`
  }

  return fullPath
}

/**
 * Build URL
 * @param  {...String} parts URL parts.
 * @return {String} Amalgamation of URL parts.
 */
export function buildUrl (...parts) {
  return (/^(http|https)/.test(parts[0]) ? '' : '/') + (parts
    .filter(part => (typeof part === 'string' || typeof part === 'number') && part !== '')
    .join('/')
    .replace(/^\/|\/$/g, ''))
}

/**
 * Redirect If
 * @param  {Boolean} condition Condition as to whether the redirect will be called.
 * @param  {String} path Redirect path.
 */
export function redirectIf (condition, path) {
  if (condition) route(path)
}